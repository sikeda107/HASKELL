-- Ex9.6
Proof:
xs ++ [] = xs                             ----(base)
xs ++ (ys ++ zs) = (xs ++ ys) ++ zs       ----(ind)
length (xs ++ ys) = length xs + length ys ----(hyp)
Base
 We look separately at the two sides of (base).
 left-hand side,
 length (xs ++ [])
 = length xs
 right-hand side,
 length xs

 which shows their equality.

Induction
 First we look at the left-hand side of (ind)
 length (xs ++ (ys ++ zs))
 by (hyp)
 = length xs + length (ys ++ zs)
 = length xs + length ys + length zs

 Now, looking at the right-hand side of (ind) we get
 length (xs ++ ys) ++ zs
 by (hyp)
 = length (xs ++ ys) + length zs
 = length xs + length ys + length zs

 This shows that (ind) follows from (hyp), completing the second half of the proof and so the proof itself.

-- Ex9.7

length (reverse []) = length []          ----(base)
length (reverse xs) = length xs          ----(hyp)
length (reverse (x:xs)) = length (x:xs)  ----(ind)
Proof:
Base
 We look separately at the two sides of (base).
 left-hand side,
 length (reverse [])
 = length ([])
 = 0
 right-hand side,
 length []
 = 0

	which shows their equality.

Induction
First we look at the left-hand side of (ind)
length (reverse (x:xs))
= length (reverse xs ++ [x])
= length (reverse xs) + length [x]
= length (reverse xs) + 1
by (hyp)
= length xs + 1

Now, looking at the right-hand side of (ind) we get
length (x:xs)
= 1 + length xs

This shows that (ind) follows from (hyp), completing the second half of the proof and so the proof itself.

-- Ex10.6
squares :: [Integer] -> [Integer]
squares ns = map (^2) ns

sumsquares :: [Integer] -> Integer
sumsquares ns = foldr1 (+) (map square ns)

overzeros :: [Integer] -> Bool
overzeros ns = and (map (> 0) ns)

-- Ex10.7
minimumf :: (Integer -> Integer) -> Integer -> Integer
minimumf f n = minimum (map f [0..n])

equals :: (Integer -> Integer ) -> Integer -> Bool
equals f x = and (map (== (head xs ) ) xs )
 where xs = map f [0..x]

overzeros :: (Integer -> Integer ) -> Integer -> Bool
overzeros f x = and (map (> 0) (map f [0..x]))

checkSort :: (Integer -> Integer) -> Integer -> Bool
checkSort f x = isSorted (map f [0..x])

-- Ex10.15
last :: [a] -> a
last [x] =  x
last (_:xs) =  last xs

init :: [a] -> [a]
init [x] =  []
init (x:xs) =  x : init xs

unzip :: [(a, b)] -> ([a], [b])
unzip xs = (map fst xs, map snd xs)

-- Ex10.24
dropUntil :: (a -> Bool) -> [a] -> [a]
dropUntil p []    = []
dropUntil p (x:xs)
  | not (p x)   = dropUntil p xs
  | otherwise   = x : dropUntil p xs
